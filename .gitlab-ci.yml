stages:
  - buildah:test
  - test:unit
  - docker:dev
  - docker:staging
  - docker:uat
  - docker:prod
  - docker:hotfix
  - scan:image
  - deploy:dev
  - deploy:staging
  - deploy:uat
  - deploy:prod
  - deploy:hotfix

variables:
  SERVICE_NAME: 'nodejs-api'
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE/$SERVICE_NAME
  KUSTOMIZE_PROJECT: devops/kustomization.git

buildah-build:
  stage: buildah:test
  tags:
    - buildah-runner
  image: google/cloud-sdk:518.0.0-alpine
  variables:
    DOCKER_HOST: tcp://docker:2375
    FF_USE_POWERSHELL_PATH_RESOLVER: "true"
    FF_RETRIEVE_POD_WARNING_EVENTS: "true"
    FF_PRINT_POD_EVENTS: "true"
    FF_SCRIPT_SECTIONS: "true"
    HOME: /my_custom_dir
  before_script:
    - apk --update add podman
    - podman version
    - podman login git.7solutions.co.th:5050 -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - DEV_IMAGE=$(git log --format="%h" -n 1 --abbrev=8 | tail -n 1)
  script:
    - podman version
    - podman build --build-arg gitlab_username=ci-bot -t $DOCKER_IMAGE_NAME:podman-$DEV_IMAGE .
    - podman push $DOCKER_IMAGE_NAME:podman-$DEV_IMAGE
  rules:
    - if: '$CI_COMMIT_BRANCH == "feat/gitlab-ci" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push")'
      when: on_success
    - when: never

unit-test:
  tags:
    - shared
  stage: test:unit
  image: node:22-alpine
  script:
    - npm ci
    - npm run test:ci
  artifacts:
    paths:
      - coverage/junit.xml
    reports:
      junit: coverage/junit.xml
    expire_in: 1 week
  rules:
    - if: '($CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH =~ "/^hotfix\/.+$/") && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push") && $CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000"'
      when: on_success
    - when: never
  
docker-build-dev:
  tags:
    - shared
  stage: docker:dev
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - docker login git.7solutions.co.th:5050 -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - DEV_IMAGE=$(git log --format="%h" -n 1 --abbrev=8 | tail -n 1)
  script:
    - docker build -t $DOCKER_IMAGE_NAME:dev-$DEV_IMAGE .
    - docker push $DOCKER_IMAGE_NAME:dev-$DEV_IMAGE
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push")'
      when: on_success
    - when: never

docker-build-staging:
  tags:
    - shared
  stage: docker:staging
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - docker login git.7solutions.co.th:5050 -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - DEV_IMAGE=$(git log --format="%h" -n 2 --abbrev=8 | tail -n 1)
  script:
    - docker pull $DOCKER_IMAGE_NAME:dev-$DEV_IMAGE
    - docker image tag $DOCKER_IMAGE_NAME:dev-$DEV_IMAGE $DOCKER_IMAGE_NAME:stg-$DEV_IMAGE
    - docker push $DOCKER_IMAGE_NAME:stg-$DEV_IMAGE
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push")'
      when: on_success
    - when: never

docker-build-uat:
  tags:
    - shared
  stage: docker:uat
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - docker login git.7solutions.co.th:5050 -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - DEV_IMAGE=$(git log --format="%h" -n 3 --abbrev=8 | tail -n 1)
  script:
    - docker pull $DOCKER_IMAGE_NAME:dev-$DEV_IMAGE
    - docker image tag $DOCKER_IMAGE_NAME:dev-$DEV_IMAGE $DOCKER_IMAGE_NAME:uat-$DEV_IMAGE
    - docker push $DOCKER_IMAGE_NAME:uat-$DEV_IMAGE
  rules:
    - if: '$CI_COMMIT_BRANCH == "uat" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push")'
      when: on_success
    - when: never

docker-build-prod:
  tags:
    - shared
  stage: docker:prod
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - docker login git.7solutions.co.th:5050 -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - DEV_IMAGE=$(git log --format="%h" -n 4 --abbrev=8 | tail -n 1)
  script:
    - docker pull $DOCKER_IMAGE_NAME:dev-$DEV_IMAGE
    - docker image tag $DOCKER_IMAGE_NAME:dev-$DEV_IMAGE $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
    - docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /hotfix/'
      when: on_success
    - when: never

docker-build-hotfix:
  tags:
    - shared
  stage: docker:hotfix
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - docker login git.7solutions.co.th:5050 -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - HOTFIX_IMAGE_TAG=$(git log --format="%h" -n 1 --abbrev=8 | tail -n 1)
  script:
    - docker build -t $DOCKER_IMAGE_NAME:hotfix-$HOTFIX_IMAGE_TAG .
    - docker push $DOCKER_IMAGE_NAME:hotfix-$HOTFIX_IMAGE_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH =~ "/^hotfix\/.+$/" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push") && $CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000"'
      when: on_success
    - when: never

scan-image:
  tags:
    - shared
  stage: scan:image
  image: 
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --update docker openrc
    - DEV_IMAGE=$(git log --format="%h" -n 1 --abbrev=8 | tail -n 1)
    - docker login $DOCKER_IMAGE_NAME -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - trivy --version
  script:
    - trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl" -o gl-container-scanning-report.json $DOCKER_IMAGE_NAME:dev-$DEV_IMAGE
    - cat gl-container-scanning-report.json
  cache:
    paths:
      - .trivycache/ 
  dependencies:
    - docker-build-dev
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push")'
      when: on_success
    - when: never

scan-image-hotfix:
  tags:
    - shared
  stage: scan:image
  image: 
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --update docker openrc
    - HOTFIX_IMAGE_TAG=$(git log --format="%h" -n 1 --abbrev=8 | tail -n 1)
    - docker login $DOCKER_IMAGE_NAME -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - trivy --version
  script:
    - trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl" -o gl-container-scanning-report.json $DOCKER_IMAGE_NAME:hotfix-$HOTFIX_IMAGE_TAG
    - cat gl-container-scanning-report.json
  cache:
    paths:
      - .trivycache/ 
  dependencies:
    - docker-build-hotfix
  rules:
    - if: '$CI_COMMIT_BRANCH =~ "/^hotfix\/.+$/" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push") && $CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000"'
      when: on_success
    - when: never

deploy-dev:
  stage: deploy:dev
  tags:
    - shared
  image:
    name: line/kubectl-kustomize:latest
    entrypoint: [""]
  before_script:
    - apk --update add git
    - DEV_IMAGE=$(git log --format="%h" -n 1 --abbrev=8 | tail -n 1)
    - git config --global user.name gitlab-ci-bot
    - git config --global user.email gitlab-ci-bot@7solutions.co.th
  script:
    - echo "Deploy DEV"
    - git clone https://$GIT_USER:$GIT_PASSWORD@$CI_SERVER_HOST/$KUSTOMIZE_PROJECT
    - cd kustomization/kustomize/$SERVICE_NAME/overlays/dev/
    - kustomize edit set image git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:IMAGE_TAG=git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:dev-$DEV_IMAGE
    - git commit -am "update image tag dev-$DEV_IMAGE"
    - git push
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push")'
      when: on_success
    - when: never

deploy-staging:
  tags:
    - shared
  stage: deploy:staging
  image:
    name: line/kubectl-kustomize:latest
    entrypoint: [""]
  before_script:
    - apk --update add git
    - DEV_IMAGE=$(git log --format="%h" -n 2 --abbrev=8 | tail -n 1)
    - git config --global user.name gitlab-ci-bot
    - git config --global user.email gitlab-ci-bot@7solutions.co.th
  script:
    - echo "Deploy Staging"
    - git clone https://$GIT_USERNAME:$GIT_PASSWORD@$CI_SERVER_HOST/$KUSTOMIZE_PROJECT
    - cd kustomization/kustomize/$SERVICE_NAME/overlays/stg/
    - kustomize edit set image git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:IMAGE_TAG=git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:stg-$DEV_IMAGE
    - git commit -am "update image tag stg-$DEV_IMAGE"
    - git push
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push")'
      when: on_success
    - when: never
  
deploy-uat:
  tags:
    - shared
  stage: deploy:uat
  image:
    name: line/kubectl-kustomize:latest
    entrypoint: [""]
  before_script:
    - apk --update add git
    - DEV_IMAGE=$(git log --format="%h" -n 3 --abbrev=8 | tail -n 1)
    - git config --global user.name gitlab-ci-bot
    - git config --global user.email gitlab-ci-bot@7solutions.co.th
  script:
    - echo "Deploy UAT"
    - git clone https://$GIT_USERNAME:$GIT_PASSWORD@$CI_SERVER_HOST/$KUSTOMIZE_PROJECT
    - cd kustomization/kustomize/$SERVICE_NAME/overlays/uat/
    - kustomize edit set image git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:IMAGE_TAG=git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:uat-$DEV_IMAGE    
    - git commit -am "update image tag uat-$DEV_IMAGE"
    - git push
  rules:
    - if: '$CI_COMMIT_BRANCH == "uat" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push")'
      when: on_success
    - when: never

deploy-prod:
  tags:
    - shared
  stage: deploy:prod
  image:
    name: line/kubectl-kustomize:latest
    entrypoint: [""]
  before_script:
    - apk --update add git docker openrc
    - docker login git.7solutions.co.th:5050 -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - git config --global user.name gitlab-ci-bot
    - git config --global user.email gitlab-ci-bot@7solutions.co.th
  script:
    - echo "Deploy Prod"
    - git clone https://$GIT_USERNAME:$GIT_PASSWORD@$CI_SERVER_HOST/$KUSTOMIZE_PROJECT
    - cd kustomization/kustomize/$SERVICE_NAME/overlays/prod/
    - kustomize edit set image git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:IMAGE_TAG=git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:$CI_COMMIT_TAG
    - git commit -am "update image tag $CI_COMMIT_TAG to production"
    - git push
  dependencies:
    - docker-build-prod
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /hotfix/'
      when: on_success
    - when: never

deploy-hotfix:
  tags:
    - shared
  stage: deploy:hotfix
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login git.7solutions.co.th:5050 -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - HOTFIX_IMAGE_TAG=$(git log --format="%h" -n 2 --abbrev=8 | tail -n 1)
    - cat /etc/os-release
    - git config --global user.name gitlab-ci-bot
    - git config --global user.email gitlab-ci-bot@7solutions.co.th
  script:
    - echo "Deploy Prod from Hotfix"
    - apk --update add curl bash
    - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
    - export PATH="$PATH:/builds/devops/first-ci-cd-pipeline"
    - docker pull $DOCKER_IMAGE_NAME:hotfix-$HOTFIX_IMAGE_TAG
    - docker image tag $DOCKER_IMAGE_NAME:hotfix-$HOTFIX_IMAGE_TAG $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
    - docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
    - git clone https://$GIT_USERNAME:$GIT_PASSWORD@$CI_SERVER_HOST/$KUSTOMIZE_PROJECT
    - cd kustomization/kustomize/$SERVICE_NAME/overlays/prod/
    - kustomize edit set image git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:IMAGE_TAG=git.7solutions.co.th:5050/devops/first-ci-cd-pipeline/nodejs-api:$CI_COMMIT_TAG
    - git commit -am "update image tag $CI_COMMIT_TAG to production"
    - git push
  rules:
    - if: '$CI_COMMIT_TAG =~ /hotfix/'
      when: on_success
    - when: never